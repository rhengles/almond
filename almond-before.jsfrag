
var requirejs, require, define;
(function(undef) {

var prevRequirejs,
    prevRequire,
    prevDefine,
    rootInstance = factory();

return global();

function global() {
    prevRequirejs = requirejs;
    prevRequire = require;
    prevDefine = define;

    requirejs = require = rootInstance.require;
    define = rootInstance.define;

    require.factory = factory;
    require.global = global;
    require.noConflict = noConflict;

    return rootInstance;
}

function noConflict() {
    requirejs = prevRequirejs;
    require = prevRequire;
    define = prevDefine;
    return rootInstance;
}

function packageInstance(instance, opt) {//pkgDeps, parent
    var require = instance.require,
        define  = instance.define,
        defMod  = {},
        defPkg  = {},
        pkgDeps = opt && opt.deps,
        parent  = opt && opt.parent;
    moduleDefine.amd = define.amd;
    instance.require = moduleRequire;
    instance.define  = moduleDefine;
    package .require = require;
    package .define  = packageDefine;
    instance.package = package;
    instance._defMod = defMod;
    instance._defPkg = defPkg;
    instance._pkg    = opt;

    return instance;

    function importPkgModule(name, pkg) {
        define(name, function() {
            return pkg.require(name);
        });
    }
    function importPkgDeps(pkg) {
        var pkgMods = pkg._defMod;
        for ( var k in pkgMods ) {
            importPkgModule(k, pkg);
        }
    }
    function importPkgs() {
        var pkgs = moduleRequireManyFrom(pkgDeps, parent.require),
            pcount = pkgDeps.length;
        for ( var i = 0; i < pcount; i++ ) {
            importPkgDeps(pkgs[i]);
        }
    }
    function package(name, deps) {
        if ( defPkg[name] ) {
            if ( deps ) {
                throw new Error('Can\'t change deps of defined package '+name);
            }
            return require(name);
        } else {
            return packageDefine(name, deps);
        }
    }
    function moduleRequire(deps, callback) {
      var one = false;
      if ( 'string' === typeof deps ) {
          one = true;
          deps = [moduleRequireOne(deps)];
      } else if ( deps.splice ) {
          deps = moduleRequireMany(deps);
      } else {
          return require.apply(instance, arguments);
      }
      if ( one ) {
          return deps[0];
      } else {
          callback && callback.apply(undef, deps);
          return instance.require;
      }
    }
    function moduleRequireManyFrom(deps, reqSource) {
        var mods = [],
            count = deps.length;
        for ( var i = 0; i < count; i++ ) {
            mods[i] = reqSource(deps[i]);
        }
        return mods;
    }
    function moduleRequireMany(deps) {
        return moduleRequireManyFrom(deps, moduleRequireOne);
    }
    function moduleRequireOne(name) {
        if ( pkgDeps && parent ) {
            importPkgs();
            pkgDeps = null;
            parent  = null;
        }
        return require(name);
    }
    function moduleDefine(name) {
        defMod[name] = true;
        return define.apply(this, arguments);
    }
    function packageDefine(name, subPkgDeps) {
        defPkg[name] = true;
        var pkgOpt = {
                name: name,
                deps: subPkgDeps,
                parent: instance
            },
            pkg = packageInstance(instance.factory(), pkgOpt);
        define(name, function() {
            return pkg;
        });
        return pkg;
    }
}

function factory() {
